.import simd
.import Accelerate
.import Foundation
.#if canImport(SwiftUI)
.import SwiftUI
.#endif
.#if canImport(SceneKit)
.import SceneKit
.#endif

let simdt = ["SIMD2<Float>", "SIMD3<Float>", "SIMD4<Float>", "SIMD8<Float>", "SIMD16<Float>", "SIMD2<Double>", "SIMD3<Double>", "SIMD4<Double>", "SIMD8<Double>"]
let simdw = [2, 3, 4, 8, 16, 2, 3, 4, 8]
let ult = ["Float", "Float", "Float", "Float", "Float", "Double", "Double", "Double", "Double"]
let st = (n) => `SIMD${simdw[n]}<${ult[n]}>`
let intv = {
    "Float": "Int32",
    "Double": "Int"
}
let qt = ["x", "y", "z", "w"]
let lh = [ 'lowHalf.', 'highHalf.' ]
let simdvals = [
    ["x", "y"],
    ["x", "y", "z"],
    qt,
    lh.flatMap((v) => qt.map((g) => `${v}${g}`)),
    lh.flatMap((l) => lh.flatMap((h) => qt.map((g) => `${l}${h}${g}`))),
    ["x", "y"],
    ["x", "y", "z"],
    qt,
    lh.flatMap((v) => qt.map((g) => `${v}${g}`)),
]

for (let i = 0; i < simdt.length; ++i) {
.public extension @{st(i)} {
.    /// Returns the distance between `self` and `to`
.    func distance(to: @{simdt[i]}) -> @{ult[i]} {
.        simd_distance(self, to)
.    }
.    /// Quickly returns the distance between `self` and `to`
.    func distanceFast(to: @{simdt[i]}) -> @{ult[i]} {
.        simd_fast_distance(self, to)
.    }
.    /// Returns the precise distance between `self` and `to`
.    func distancePrecise(to: @{simdt[i]}) -> @{ult[i]} {
.        simd_precise_distance(self, to)
.    }
.    /// The length of `self`
.    var length: @{ult[i]} { simd_length(self) }
.    /// the length squared of `self`
.    var lengthSquared: @{ult[i]} { simd_length_squared(self) }
.    /// The vector where all fields are the absolute value
.    var abs: Self { simd_abs(self) }
.    /// Clamps `self` to the fields of `min` and `max`
.    func clamp(min: @{simdt[i]}, max: @{simdt[i]}) -> @{simdt[i]} {
.        simd_clamp(self, min, max)
.    }
.    /// Clamps `self` to the values of `min` and `max`
.    func clamp(min: @{ult[i]}, max: @{ult[i]}) -> @{simdt[i]} {
.        simd_clamp(self, Self(repeating: min), Self(repeating: max))
.    }
.    /// The fractional part of each element
.    var fract: Self { simd_fract(self) }
.    /// The sign of each element
.    var sign: Self { simd_sign(self) }
.    /// The sum of all elements in the vector
.    var reduceAdd: @{ult[i]} { simd_reduce_add(self) }
.    /// The max of all elements in the vector
.    var max: @{ult[i]} { simd_reduce_max(self) }
.    /// The min of all elements in the vector
.    var min: @{ult[i]} { simd_reduce_min(self) }
.    /// Returns linear interpolation of `self` with `with` by `alpha` percent
.    func lerp(with: @{simdt[i]}, by alpha: @{simdt[i]}) -> Self {
.        simd_mix(self, with, alpha)
.    }
.    /// Returns linear interpolation of `self` with `with` by `alpha` percent
.    func lerp(with: @{simdt[i]}, by alpha: @{ult[i]}) -> Self {
.        simd_mix(self, with, Self(repeating: alpha))
.    }
.    /// Returns smooth interpolation of `self` with `with` by `alpha` percent
.    func smoothstep(with: @{simdt[i]}, by alpha: @{simdt[i]}) -> Self {
.        simd_smoothstep(self, with, alpha)
.    }
.    /// Default reciprocal of each element
.    var recip: Self { simd_recip(self) }
.    /// Fast reciprocal of each element
.    var recipFast: Self { simd_fast_recip(self) }
.    /// Precise reciprocal of each element
.    var recipPrecise: Self { simd_precise_recip(self) }
.    /// Default reciprocal square root of each element
.    var rsqrt: Self { simd_rsqrt(self) }
.    /// Fast reciprocal square root of each element
.    var rsqrtFast: Self { simd_fast_rsqrt(self) }
.    /// Precise reciprocal square root of each element
.    var rsqrtPrecise: Self { simd_precise_rsqrt(self) }
.    /// `e` raised to the power of each element in vector
.    @{"@"}available(iOS 15, *)
.    var exp: Self { simd.exp(self) }
.    /// `2` raised to the power of each element in vector
.    @{"@"}available(iOS 15, *)
.    var exp2: Self { simd.exp2(self) }
.    /// `10` raised to the power of each element in vector
.    @{"@"}available(iOS 15, *)
.    var exp10: Self { simd.exp10(self) }
.    /// `e-1` for each element in vector
.    @{"@"}available(iOS 15, *)
.    var expm1: Self { simd.expm1(self) }
.    /// Natural logarithm of each element
.    @{"@"}available(iOS 15, *)
.    var log: Self { simd.log(self) }
.    /// Base 2 Natural logarithm of each element
.    @{"@"}available(iOS 15, *)
.    var log2: Self { simd.log2(self) }
.    /// Base 10 Natural logarithm of each element
.    @{"@"}available(iOS 15, *)
.    var log10: Self { simd.log10(self) }
.    /// `log(1+x)` of each element
.    @{"@"}available(iOS 15, *)
.    var log1p: Self { simd.log1p(self) }
if (i == 0 || i == 1 || i == 5 || i == 6) {
.    /// Cross product of two vectors
.    func cross(with: Self) -> @{simdt[i === 0 || i === 5 ? i + 1 : i]} { simd_cross(self, with) }
}
.    /// Dot product of two vectors
.    func dot(with: Self) -> @{ult[i]} { simd_dot(self, with) }
.    /// Normalized vector
.    var normalized: Self { simd_normalize(self) }
.    /// Quickly normalized vector
.    var normalizedFast: Self { simd_fast_normalize(self) }
.    /// Precisely normalized vector
.    var normalizedPrecise: Self { simd_precise_normalize(self) }
.    /// Project `self` onto `on`
.    func project(on to: Self) -> Self { simd_project(self, to) }
.    /// Project `self` onto `on` quickly
.    func projectFast(on to: Self) -> Self { simd_fast_project(self, to) }
.    /// Project `self` onto `on` with precision
.    func projectPrecise(on to: Self) -> Self { simd_precise_project(self, to) }
.    /// Reflection of `self` as incident vector with a unit normal vector
if (i != 3 && i != 4 && i != 8) {
.    func reflect(on normal: Self) -> Self { simd_reflect(self, normal) }
.    /// Refraction of `self` as incident vector with a unit normal vector and refraction
.    func refract(on normal: Self, idx of: @{ult[i]}) -> Self { simd_refract(self, normal, of) }
}
.    /// Inverse hyperbolic cosine of each element
.    @{"@"}available(iOS 15, *)
.    var acosh: Self { simd.acosh(self) }
.    /// Inverse hyperbolic sine of each element
.    @{"@"}available(iOS 15, *)
.    var asinh: Self { simd.asinh(self) }
.    /// Inverse hyperbolic tangent of each element
.    @{"@"}available(iOS 15, *)
.    var atanh: Self { simd.atanh(self) }
.    /// Hyperbolic cosine of each element
.    @{"@"}available(iOS 15, *)
.    var cosh: Self { simd.cosh(self) }
.    /// Hyperbolic sine of each element
.    @{"@"}available(iOS 15, *)
.    var sinh: Self { simd.sinh(self) }
.    /// Hyperbolic tangent of each element
.    @{"@"}available(iOS 15, *)
.    var tanh: Self { simd.tanh(self) }
.    /// Cube root of each element
.    @{"@"}available(iOS 15, *)
.    var cbrt: Self { simd.cbrt(self) }
if (i != 3 && i != 4 && i != 8) {
.    /// Ceil of each element
.    @{"@"}available(iOS 15, *)
.    var asCeil: Self { simd.ceil(self) }
.    /// Floor of each element
.    @{"@"}available(iOS 15, *)
.    var floor: Self { simd.floor(self) }
}
.    /// Error function of each element
.    @{"@"}available(iOS 15, *)
.    var erf: Self { simd.erf(self) }
.    /// Complementary error function of each element
.    @{"@"}available(iOS 15, *)
.    var erfc: Self { simd.erfc(self) }
.    /// Multiply-add result of corresponding elements in three vectors
.    @{"@"}available(iOS 15, *)
.    func fma(_ a: Self, _ b: Self) -> Self { simd.fma(self, a, b) }
.    /// Modulo of `self` / `other`
.    @{"@"}available(iOS 15, *)
.    func fmod(_ other: Self) -> Self { simd.fmod(self, other) }
.    /// Each element rounded to nearest integer
.    @{"@"}available(iOS 15, *)
.    var rounded: Self { simd.round(self) }
if (i != 3 && i != 4 && i != 8) {
.    /// Each element rounded toward zero to nearest integer
.    var trunc: Self { simd.trunc(self) }
}
.    @{"@"}available(iOS 15, *)
.    var acos: Self { simd.acos(self) }
.    @{"@"}available(iOS 15, *)
.    var asin: Self { simd.asin(self) }
.    @{"@"}available(iOS 15, *)
.    var atan: Self { simd.atan(self) }
.    @{"@"}available(iOS 15, *)
.    var cos: Self { simd.cos(self) }
.    @{"@"}available(iOS 15, *)
.    var cospi: Self { simd.cospi(self) }
.    @{"@"}available(iOS 15, *)
.    var sin: Self { simd.sin(self) }
.    @{"@"}available(iOS 15, *)
.    var sinpi: Self { simd.sinpi(self) }
.    @{"@"}available(iOS 15, *)
.    var tan: Self { simd.tan(self) }
.    @{"@"}available(iOS 15, *)
.    var tanpi: Self { simd.tanpi(self) }
.    /// Setting this computed property is safe from crashes
.    var asArray: [@{ult[i]}] {
.        get {[
for (let e of simdvals[i]) {
.            @{e},
}
.        ]} set(v) {
.            if v.count == 0 { return }
.            let sm1 = v.count - 1
for (let j = 0; j < simdvals[i].length; ++j) {
.            @{simdvals[i][j]} = v[@{j}]; if sm1 == @{j} { return }
}
.        }
.    }
.    /// Manhattan distance of `self` to `to`
.    func manhattanDistance(to: Self) -> Self {
.        (self - to).abs
.    }
.    init(array: [@{ult[i]}]) {
.        self.init()
.        asArray = array
.    }
if (i == 2 || i == 7) {
.    init(axis: SIMD3<@{ult[i]}>, rad: @{ult[i]}) {
.        let halfAngle = rad / 2
.        let s = Foundation.sin( halfAngle )
.        self.init(axis.x * s, axis.y * s, axis.z * s, Foundation.cos( halfAngle ))
.    }
.    init(euler: SIMD3<@{ult[i]}>, order: EulerOrder) {
    let cs = ["cos1", "cos2", "cos3", "sin1", "sin2", "sin3"]; let ax = ['x', 'y', 'z', 'x', 'y', 'z']
    for (let j = 0; j < 6; ++j) {
.        let @{cs[j][0] + cs[j][3]} = Foundation.@{cs[j].substr(0,3)}( euler.@{ax[j]} / 2 )
    }
.        switch order {
.        case .XYZ: self.init(
.            s1 * c2 * c3 + c1 * s2 * s3,
.            c1 * s2 * c3 - s1 * c2 * s3,
.            c1 * c2 * s3 + s1 * s2 * c3,
.            c1 * c2 * c3 - s1 * s2 * s3
.            )
.        case .YXZ: self.init(
.            s1 * c2 * c3 + c1 * s2 * s3,
.            c1 * s2 * c3 - s1 * c2 * s3,
.            c1 * c2 * s3 - s1 * s2 * c3,
.            c1 * c2 * c3 + s1 * s2 * s3
.            )
.        case .ZXY: self.init(
.            s1 * c2 * c3 - c1 * s2 * s3,
.            c1 * s2 * c3 + s1 * c2 * s3,
.            c1 * c2 * s3 + s1 * s2 * c3,
.            c1 * c2 * c3 - s1 * s2 * s3
.            )
.        case .ZYX: self.init(
.            s1 * c2 * c3 - c1 * s2 * s3,
.            c1 * s2 * c3 + s1 * c2 * s3,
.            c1 * c2 * s3 - s1 * s2 * c3,
.            c1 * c2 * c3 + s1 * s2 * s3
.            )
.        case .YZX: self.init(
.            s1 * c2 * c3 + c1 * s2 * s3,
.            c1 * s2 * c3 + s1 * c2 * s3,
.            c1 * c2 * s3 - s1 * s2 * c3,
.            c1 * c2 * c3 - s1 * s2 * s3
.            )
.        case .XZY: self.init(
.            s1 * c2 * c3 - c1 * s2 * s3,
.            c1 * s2 * c3 - s1 * c2 * s3,
.            c1 * c2 * s3 + s1 * s2 * c3,
.            c1 * c2 * c3 + s1 * s2 * s3
.            )
.        }
.    }
    let m =  ["0.x", "0.y", "0.z", "1.x", "1.y", "1.z", "2.x", "2.y", "2.z"]
    let ms = ["m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33"]
.    init(matrix: simd_@{ult[i].toLowerCase()}3x3) {
    for (let j = 0; j < m.length; j++) {
.        let @{ms[j]} = matrix.columns.@{m[j]}
    }
.        let trace = m11 + m22 + m33
.        if trace > 0 {
.            let s = @{ult[i]}(0.5) / Foundation.sqrt(trace + @{ult[i]}(1.0))
.            self.init( (m32 - m23) * s, (m13 - m31) * s, (m21 - m12) * s, @{ult[i]}(0.25) / s )
.        } else if m11 > m22 && m11 > m33 {
.            let s = @{ult[i]}(2.0) * Foundation.sqrt( @{ult[i]}(1.0) + m11 - m22 - m33)
.            self.init( @{ult[i]}(0.25) * s, (m12 + m21) / s, (m13 + m31) / s, (m32 - m23) / s )
.        } else if m22 > m33 {
.            let s = @{ult[i]}(2.0) * Foundation.sqrt( @{ult[i]}(1.0) + m22 - m11 - m33)
.            self.init( (m12 + m21) / s, @{ult[i]}(0.25) * s, (m32 + m23) / s, (m13 - m31) / s )
.        } else {
.            let s = @{ult[i]}(2.0) * Foundation.sqrt( @{ult[i]}(1.0) + m33 - m11 - m22)
.            self.init( (m13 + m31) / s, (m32 + m23) / s, @{ult[i]}(0.25) * s, (m12 - m21) / s )
.        }
.    }
.    /// Initialize from Unit Vectors
.    init(from: SIMD3<@{ult[i]}>, to: SIMD3<@{ult[i]}>) {
.        var r = from.dot(with: to) + 1
.        if r < @{ult[i]}.ulpOfOne {
.            r = 0
.            if (Swift.abs(from.x) > Swift.abs(from.z)) {
.                self.init(-from.y, from.x, 0, r)
.            } else {
.                self.init(0, -from.z, from.y, r)
.            }
.        } else {
.            self.init(from.y * to.z - from.z * to.y, from.z * to.x - from.x * to.z, from.x * to.y - from.y * to.x, r)
.        }
.        self = normalized
.    }
.    func angle(to: Self) -> @{ult[i]} {
.        2 * Foundation.acos(Swift.abs((self.dot(with: to)).clamp(-1, 1)))
.    }
.    func rotate(towards: Self, step: @{ult[i]}) -> Self {
.        let ang = angle(to: towards)
.        if (ang == 0) {return self}
.        let t = Swift.min(1, step / ang)
.        return slerp( quat: towards, t: t )
.    }
.    func slerp(quat: Self, t: @{ult[i]}) -> Self {
.        if t == 0 {return self}
.        if t == 1 {return quat}
.        var cosHalfTheta = w * quat.w + x * quat.x + y * quat.y + z * quat.z
.        var rv = quat
.        if cosHalfTheta < 0 {
.            cosHalfTheta = -cosHalfTheta
.            rv = quat * -@{ult[i]}(1.0)
.        }
.        if cosHalfTheta >= 1.0 {
.           return self
.        }
.        let sqrSinHalfTheta = @{ult[i]}(1.0) - cosHalfTheta * cosHalfTheta
.        if sqrSinHalfTheta <= @{ult[i]}.ulpOfOne {
.            let s = 1 - t
.            rv.w = s * w + t * rv.w
.            rv.x = s * x + t * rv.x
.            rv.y = s * y + t * rv.y
.            rv.z = s * z + t * rv.z
.            rv = rv.normalized
.            return rv
.        }
.        let sinHalfTheta = Foundation.sqrt( sqrSinHalfTheta )
.        let halfTheta = Foundation.atan2( sinHalfTheta, cosHalfTheta )
.        let ratioA = Foundation.sin( (1 - t) * halfTheta ) / sinHalfTheta
.        let ratioB = Foundation.sin( t * halfTheta ) / sinHalfTheta
.        return (self * ratioA + rv * ratioB)
.    }
.    var invert: Self { Self(-x, -y, -z, w) }
.    func multiply(by: Self) -> Self {
.        let v1 = Self(repeating: by.w)
.        let v2 = Self(self.w, self.w, self.w, -self.x)
.        let v3 = Self(by.x, by.y, by.z, by.x)
.        let v4 = Self(self.y, self.z, self.x, -self.y)
.        let v5 = Self(by.z, by.x, by.y, by.y)
.        let v6 = -Self(self.z, self.x, self.y, self.z)
.        let v7 = Self(by.y, by.z, by.x, by.z)
.        return self * v1 + v2 * v3 + v4 * v5 + v6 * v7
.    }
.    func preMultiply(by: Self) -> Self {
.        return by.multiply(by: self)
.    }
.#if canImport(SwiftUI)
.    @{"@"}available(iOS 13, *)
.    var asColor: Color {
.        let norm = normalized
.        return Color(red: Double(norm.x), green: Double(norm.y), blue: Double(norm.z), opacity: Double(norm.w))
.    }
.#endif
.#if canImport(CoreGraphics)
.    var asUIColor: UIColor {
.        let norm = normalized
.        return UIColor(red: CGFloat(norm.x), green: CGFloat(norm.y), blue: CGFloat(norm.z), alpha: CGFloat(norm.w))
.    }
.    @{"@"}available(iOS 13, *)
.    var asCGColor: CGColor {
.        let norm = normalized
.        return CGColor(red: CGFloat(norm.x), green: CGFloat(norm.y), blue: CGFloat(norm.z), alpha: CGFloat(norm.w))
.    }
.#endif
}
if (i === 1 || i === 6) {
.    func project(vec on: Self) -> Self {
.        let denom = self.lengthSquared
.        if denom == 0 { return Self() }
.        let scalar = on.dot(with: self) / denom
.        return on * scalar
.    }
.#if canImport(SwiftUI)
.    @{"@"}available(iOS 13, *)
.    var asColor: Color {
.        let norm = normalized
.        return Color(red: Double(norm.x), green: Double(norm.y), blue: Double(norm.z))
.    }
.#endif
.#if canImport(CoreGraphics)
.    var asUIColor: UIColor {
.        let norm = normalized
.        return UIColor(red: CGFloat(norm.x), green: CGFloat(norm.y), blue: CGFloat(norm.z), alpha: 1.0)
.    }
.    @{"@"}available(iOS 13, *)
.    var asCGColor: CGColor {
.        let norm = normalized
.        return CGColor(red: CGFloat(norm.x), green: CGFloat(norm.y), blue: CGFloat(norm.z), alpha: 1.0)
.    }
.#endif
.#if canImport(SceneKit)
.    var asSCNV3: SCNVector3 {
.        SCNVector3(Float(x), Float(y), Float(z))
.    }
.#endif
}
if (i === 0 || i === 5) {
.    func rotate(around center: Self, angle: @{ult[i]}) -> Self {
.        let c = Foundation.cos(angle)
.        let s = Foundation.sin(angle)
.        let xy = self - center
.        let v1 = Self(xy.x, xy.x)
.        let v2 = Self(c, s)
.        let v3 = Self(-xy.y, xy.y)
.        let v4 = Self(s, c)
.        return v1 * v2 + v3 * v4 + center
.    }
.#if canImport(CoreGraphics)
.    var asCGPoint: CGPoint { CGPoint(x: CGFloat(x), y: CGFloat(y)) }
.    var asCGSize: CGSize { CGSize(width: CGFloat(x), height: CGFloat(y)) }
.#endif
}
.}
}
for (let i = 0; i < 4; ++i) {
.public extension @{st(i)} {
.   var asSIMD@{ult[i+5]}: @{st(i+5)} { @{st(i+5)}(@{simdvals[i].map(v => `${ult[i+5]}(${v})`).join(',')}) }
.}
.public extension @{st(i+5)} {
.   var asSIMD@{ult[i]}: @{st(i)} { @{st(i)}(@{simdvals[i+5].map(v => `${ult[i]}(${v})`).join(',')}) }
.}
}
[1,6].forEach(i => {
.public extension Spherical where T == @{ult[i]} {
let v = `simd${ult[i][0]}`
.    /// Initialize Spherical using 3D Vector in cartesian coordinate space
.    init(cartesian @{v}: @{st(i)}) {
.        simd = @{st(i)}()
.        radius = @{v}.length
.        if radius == 0 {
.            theta = 0
.            phi = 0
.        } else {
.            theta = Foundation.atan2(@{v}.x, @{v}.z)
.            phi = Foundation.acos((@{v}.y / radius).clamp(-1, 1))
.        }
.    }
.    /// Sphirical where phi is restricted to between EPS and PI-EPS
.    var asSafe: Spherical {
.        var sph = self
.        let EPS = @{ult[i]}.ulpOfOne
.        sph.phi = Swift.max(EPS, Swift.min(@{ult[i]}.pi - EPS, sph.phi))
.        return sph
.    }
.    /// Restrict phi to between EPS and PI-EPS
.    mutating func makeSafe() {
.       self = asSafe
.    }
.    /// Spherical coordinates represented as cartesian coordinates
.    var asCartesian: @{st(i)} {
.        let sinPhiRad = Foundation.sin(phi) * radius
.        let l = @{st(i)}(sinPhiRad, Foundation.cos(phi), sinPhiRad)
.        let r = @{st(i)}(Foundation.sin(theta), radius, Foundation.cos(theta))
.        return l * r
.    }
.}
})
.#if canImport(SwiftUI)
.@{"@"}available(iOS 13, *)
.public extension View {
.    func frame(_ size: CGSize, alignment: Alignment = .center) -> some View {
.        return self.frame(width: size.width, height: size.height, alignment: alignment)
.    }
.    func frame(min: CGSize? = nil, ideal: CGSize? = nil, max: CGSize? = nil, alignment: Alignment = .center) -> some View {
.        return self.frame(minWidth: min?.width, idealWidth: ideal?.width, maxWidth: max?.width, minHeight: min?.height, idealHeight: ideal?.height, maxHeight: max?.height, alignment: alignment)
.    }
let arr = [0,5]
for (let i of arr) {
let v = `simd${simdw[i]}${ult[i][0]}`
.    func frame(_ @{v}: @{st(i)}, alignment: Alignment = .center) -> some View {
.        return self.frame(width: CGFloat(@{v}.x), height: CGFloat(@{v}.y), alignment: alignment)
.    }
.    func frame(min: @{st(i)}? = nil, ideal: @{st(i)}? = nil, max: @{st(i)}? = nil, alignment: Alignment = .center) -> some View {
.        let v: [CGFloat?] = Array(arrayLiteral: min?.x, ideal?.x, max?.x, min?.y, ideal?.y, max?.y).map { $0 == nil ? nil : CGFloat($0!) }
.        return self.frame(minWidth: v[0], idealWidth: v[1], maxWidth: v[2], minHeight: v[3], idealHeight: v[4], maxHeight: v[5], alignment: alignment)
.    }
.    func position(_ @{v}: @{st(i)}) -> some View {
.        return self.position(x: CGFloat(@{v}.x), y: CGFloat(@{v}.y))
.    }
.    func offset(_ @{v}: @{st(i)}) -> some View {
.        return self.offset(x: CGFloat(@{v}.x), y: CGFloat(@{v}.y))
.    }
}
.}
.@{"@"}available(iOS 13, *)
.public extension Path {
for (let i of arr) {
let v = `simd${simdw[i]}${ult[i][0]}`
.    static func createLinesFrom(_ @{v}points: [@{st(i)}], isClosed: Bool = true) -> Path {
.        Path { p in
.            if @{v}points.count < 2 { return }
.            let cgp = @{v}points.map { $0.asCGPoint }
.            p.move(to: cgp[0])
.            for pt in cgp[1...] {
.                p.addLine(to: pt)
.            }
.            if isClosed { p.addLine(to: cgp[0]) }
.        }
.    }
}
.}
.#endif
.#if canImport(SceneKit)
.public extension SCNVector3 {
.    init(_ x: Double, _ y: Double, _ z: Double) {
.        self.init(Float(x), Float(y), Float(z))
.    }
.    var asSIMDF: SIMD3<Float> { .init(x, y, z) }
.    var asSIMDD: SIMD3<Double> { .init(Double(x), Double(y), Double(z)) }
.}
.public extension SCNQuaternion {
.    init(_ x: Double, _ y: Double, _ z: Double, _ w: Double) {
.        self.init(Float(x), Float(y), Float(z), Float(w))
.    }
.    var asSIMDF: SIMD4<Float> { .init(x, y, z, w) }
.    var asSIMDD: SIMD4<Double> { .init(Double(x), Double(y), Double(z), Double(w)) }
.}
.public extension SCNGeometrySource {
for (let i of [1,6]) {
.    convenience init(vertices: [@{st(i)}]) {
.        self.init(vertices: vertices.map {SCNVector3($0.x, $0.y, $0.z)})
.    }
.    convenience init(normals: [@{st(i)}]) {
.        self.init(normals: normals.map {SCNVector3($0.x, $0.y, $0.z)})
.    }
}
for (let i of [0,5]) {
.    convenience init(textureCoordinates: [@{st(i)}]) {
.        self.init(textureCoordinates: textureCoordinates.map {CGPoint(x: CGFloat($0.x), y: CGFloat($0.y))})
.    }
}
.}
.#endif
